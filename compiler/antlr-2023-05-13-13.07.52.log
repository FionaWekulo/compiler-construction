2023-05-13 13:07:51:623 grammar LogManager.java:25 before: (COMBINED_GRAMMAR c (RULES (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE CHAR (BLOCK (ALT 'char'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE PRINTX (BLOCK (ALT 'printx'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE SEMI (BLOCK (ALT ';'))) (RULE LPAREN (BLOCK (ALT '('))) (RULE RPAREN (BLOCK (ALT ')'))) (RULE LBRACE (BLOCK (ALT '{'))) (RULE RBRACE (BLOCK (ALT '}'))) (RULE COMMA (BLOCK (ALT ','))) (RULE PLUS (BLOCK (ALT '+'))) (RULE MINUS (BLOCK (ALT '-'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE MOD (BLOCK (ALT '%'))) (RULE ASSIGN (BLOCK (ALT '='))) (RULE PLUS_ASSIGN (BLOCK (ALT '+='))) (RULE MINUS_ASSIGN (BLOCK (ALT '-='))) (RULE MULT_ASSIGN (BLOCK (ALT '*='))) (RULE DIV_ASSIGN (BLOCK (ALT '/='))) (RULE MOD_ASSIGN (BLOCK (ALT '%='))) (RULE INCREMENT (BLOCK (ALT '++'))) (RULE DECREMENT (BLOCK (ALT '--'))) (RULE EQ (BLOCK (ALT '=='))) (RULE NEQ (BLOCK (ALT '!='))) (RULE LT (BLOCK (ALT '<'))) (RULE GT (BLOCK (ALT '>'))) (RULE LTEQ (BLOCK (ALT '<='))) (RULE GTEQ (BLOCK (ALT '>='))) (RULE AND (BLOCK (ALT '&&'))) (RULE OR (BLOCK (ALT '||'))) (RULE NOT (BLOCK (ALT '!'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE program (BLOCK (ALT (+ (BLOCK (ALT statement)))))) (RULE statement (BLOCK (ALT variable_declaration) (ALT assignment_statement) (ALT print_statement) (ALT if_statement) (ALT while_statement) (ALT for_statement))) (RULE variable_declaration (BLOCK (ALT data_type ID (? (BLOCK (ALT ASSIGN expression))) SEMI))) (RULE data_type (BLOCK (ALT INT) (ALT FLOAT) (ALT CHAR))) (RULE assignment_statement (BLOCK (ALT (BLOCK (ALT ID INCREMENT) (ALT ID DECREMENT) (ALT ID) (ALT ID PLUS_ASSIGN) (ALT ID MINUS_ASSIGN) (ALT ID MULT_ASSIGN) (ALT ID DIV_ASSIGN) (ALT ID MOD_ASSIGN)) ASSIGN expression SEMI))) (RULE print_statement (BLOCK (ALT PRINTX LPAREN (BLOCK (ALT STRING) (ALT ID)) RPAREN SEMI))) (RULE if_statement (BLOCK (ALT IF LPAREN expression RPAREN LBRACE (+ (BLOCK (ALT statement))) RBRACE (? (BLOCK (ALT ELSE LBRACE (+ (BLOCK (ALT statement))) RBRACE)))))) (RULE while_statement (BLOCK (ALT WHILE LPAREN expression RPAREN LBRACE (+ (BLOCK (ALT statement))) RBRACE))) (RULE for_statement (BLOCK (ALT FOR LPAREN assignment_statement expression SEMI assignment_statement RPAREN LBRACE (+ (BLOCK (ALT statement))) RBRACE))) (RULE expression (BLOCK (ALT logical_term (* (BLOCK (ALT (BLOCK (ALT OR)) logical_term)))))) (RULE logical_term (BLOCK (ALT logical_factor (* (BLOCK (ALT (BLOCK (ALT AND)) logical_factor)))))) (RULE logical_factor (BLOCK (ALT (? (BLOCK (ALT NOT))) (BLOCK (ALT relation) (ALT LPAREN logical_term RPAREN))))) (RULE relation (BLOCK (ALT additive_expression (* (BLOCK (ALT (BLOCK (ALT EQ) (ALT NEQ) (ALT LT) (ALT GT) (ALT LTEQ) (ALT GTEQ)) additive_expression)))))) (RULE additive_expression (BLOCK (ALT multiplicative_expression (* (BLOCK (ALT (BLOCK (ALT PLUS) (ALT MINUS)) multiplicative_expression)))))) (RULE multiplicative_expression (BLOCK (ALT factor (* (BLOCK (ALT (BLOCK (ALT MULT) (ALT DIV) (ALT MOD)) factor)))))) (RULE factor (BLOCK (ALT (BLOCK (ALT ID INCREMENT) (ALT ID DECREMENT) (ALT ID PLUS_ASSIGN) (ALT ID MINUS_ASSIGN) (ALT ID MULT_ASSIGN) (ALT ID DIV_ASSIGN) (ALT ID MOD_ASSIGN)) ASSIGN expression) (ALT ID) (ALT INT_LITERAL) (ALT FLOAT_LITERAL) (ALT CHAR_LITERAL) (ALT LPAREN expression RPAREN))) (RULE INT_LITERAL (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT_LITERAL (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9])))))) (RULE CHAR_LITERAL (BLOCK (ALT '\'' . '\'')))))
2023-05-13 13:07:51:685 grammar LogManager.java:25 after: (COMBINED_GRAMMAR c (RULES (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE CHAR (BLOCK (ALT 'char'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE PRINTX (BLOCK (ALT 'printx'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE SEMI (BLOCK (ALT ';'))) (RULE LPAREN (BLOCK (ALT '('))) (RULE RPAREN (BLOCK (ALT ')'))) (RULE LBRACE (BLOCK (ALT '{'))) (RULE RBRACE (BLOCK (ALT '}'))) (RULE COMMA (BLOCK (ALT ','))) (RULE PLUS (BLOCK (ALT '+'))) (RULE MINUS (BLOCK (ALT '-'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE MOD (BLOCK (ALT '%'))) (RULE ASSIGN (BLOCK (ALT '='))) (RULE PLUS_ASSIGN (BLOCK (ALT '+='))) (RULE MINUS_ASSIGN (BLOCK (ALT '-='))) (RULE MULT_ASSIGN (BLOCK (ALT '*='))) (RULE DIV_ASSIGN (BLOCK (ALT '/='))) (RULE MOD_ASSIGN (BLOCK (ALT '%='))) (RULE INCREMENT (BLOCK (ALT '++'))) (RULE DECREMENT (BLOCK (ALT '--'))) (RULE EQ (BLOCK (ALT '=='))) (RULE NEQ (BLOCK (ALT '!='))) (RULE LT (BLOCK (ALT '<'))) (RULE GT (BLOCK (ALT '>'))) (RULE LTEQ (BLOCK (ALT '<='))) (RULE GTEQ (BLOCK (ALT '>='))) (RULE AND (BLOCK (ALT '&&'))) (RULE OR (BLOCK (ALT '||'))) (RULE NOT (BLOCK (ALT '!'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE program (BLOCK (ALT (+ (BLOCK (ALT statement)))))) (RULE statement (BLOCK (ALT variable_declaration) (ALT assignment_statement) (ALT print_statement) (ALT if_statement) (ALT while_statement) (ALT for_statement))) (RULE variable_declaration (BLOCK (ALT data_type ID (? (BLOCK (ALT ASSIGN expression))) SEMI))) (RULE data_type (BLOCK (ALT (SET INT FLOAT CHAR)))) (RULE assignment_statement (BLOCK (ALT (BLOCK (ALT ID INCREMENT) (ALT ID DECREMENT) (ALT ID) (ALT ID PLUS_ASSIGN) (ALT ID MINUS_ASSIGN) (ALT ID MULT_ASSIGN) (ALT ID DIV_ASSIGN) (ALT ID MOD_ASSIGN)) ASSIGN expression SEMI))) (RULE print_statement (BLOCK (ALT PRINTX LPAREN (SET STRING ID) RPAREN SEMI))) (RULE if_statement (BLOCK (ALT IF LPAREN expression RPAREN LBRACE (+ (BLOCK (ALT statement))) RBRACE (? (BLOCK (ALT ELSE LBRACE (+ (BLOCK (ALT statement))) RBRACE)))))) (RULE while_statement (BLOCK (ALT WHILE LPAREN expression RPAREN LBRACE (+ (BLOCK (ALT statement))) RBRACE))) (RULE for_statement (BLOCK (ALT FOR LPAREN assignment_statement expression SEMI assignment_statement RPAREN LBRACE (+ (BLOCK (ALT statement))) RBRACE))) (RULE expression (BLOCK (ALT logical_term (* (BLOCK (ALT (BLOCK (ALT OR)) logical_term)))))) (RULE logical_term (BLOCK (ALT logical_factor (* (BLOCK (ALT (BLOCK (ALT AND)) logical_factor)))))) (RULE logical_factor (BLOCK (ALT (? (BLOCK (ALT NOT))) (BLOCK (ALT relation) (ALT LPAREN logical_term RPAREN))))) (RULE relation (BLOCK (ALT additive_expression (* (BLOCK (ALT (SET EQ NEQ LT GT LTEQ GTEQ) additive_expression)))))) (RULE additive_expression (BLOCK (ALT multiplicative_expression (* (BLOCK (ALT (SET PLUS MINUS) multiplicative_expression)))))) (RULE multiplicative_expression (BLOCK (ALT factor (* (BLOCK (ALT (SET MULT DIV MOD) factor)))))) (RULE factor (BLOCK (ALT (BLOCK (ALT ID INCREMENT) (ALT ID DECREMENT) (ALT ID PLUS_ASSIGN) (ALT ID MINUS_ASSIGN) (ALT ID MULT_ASSIGN) (ALT ID DIV_ASSIGN) (ALT ID MOD_ASSIGN)) ASSIGN expression) (ALT ID) (ALT INT_LITERAL) (ALT FLOAT_LITERAL) (ALT CHAR_LITERAL) (ALT LPAREN expression RPAREN))) (RULE INT_LITERAL (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT_LITERAL (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9])))))) (RULE CHAR_LITERAL (BLOCK (ALT '\'' . '\'')))))
2023-05-13 13:07:51:763 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR c (RULES (RULE program (BLOCK (ALT (+ (BLOCK (ALT statement)))))) (RULE statement (BLOCK (ALT variable_declaration) (ALT assignment_statement) (ALT print_statement) (ALT if_statement) (ALT while_statement) (ALT for_statement))) (RULE variable_declaration (BLOCK (ALT data_type ID (? (BLOCK (ALT ASSIGN expression))) SEMI))) (RULE data_type (BLOCK (ALT (SET INT FLOAT CHAR)))) (RULE assignment_statement (BLOCK (ALT (BLOCK (ALT ID INCREMENT) (ALT ID DECREMENT) (ALT ID) (ALT ID PLUS_ASSIGN) (ALT ID MINUS_ASSIGN) (ALT ID MULT_ASSIGN) (ALT ID DIV_ASSIGN) (ALT ID MOD_ASSIGN)) ASSIGN expression SEMI))) (RULE print_statement (BLOCK (ALT PRINTX LPAREN (SET STRING ID) RPAREN SEMI))) (RULE if_statement (BLOCK (ALT IF LPAREN expression RPAREN LBRACE (+ (BLOCK (ALT statement))) RBRACE (? (BLOCK (ALT ELSE LBRACE (+ (BLOCK (ALT statement))) RBRACE)))))) (RULE while_statement (BLOCK (ALT WHILE LPAREN expression RPAREN LBRACE (+ (BLOCK (ALT statement))) RBRACE))) (RULE for_statement (BLOCK (ALT FOR LPAREN assignment_statement expression SEMI assignment_statement RPAREN LBRACE (+ (BLOCK (ALT statement))) RBRACE))) (RULE expression (BLOCK (ALT logical_term (* (BLOCK (ALT (BLOCK (ALT OR)) logical_term)))))) (RULE logical_term (BLOCK (ALT logical_factor (* (BLOCK (ALT (BLOCK (ALT AND)) logical_factor)))))) (RULE logical_factor (BLOCK (ALT (? (BLOCK (ALT NOT))) (BLOCK (ALT relation) (ALT LPAREN logical_term RPAREN))))) (RULE relation (BLOCK (ALT additive_expression (* (BLOCK (ALT (SET EQ NEQ LT GT LTEQ GTEQ) additive_expression)))))) (RULE additive_expression (BLOCK (ALT multiplicative_expression (* (BLOCK (ALT (SET PLUS MINUS) multiplicative_expression)))))) (RULE multiplicative_expression (BLOCK (ALT factor (* (BLOCK (ALT (SET MULT DIV MOD) factor)))))) (RULE factor (BLOCK (ALT (BLOCK (ALT ID INCREMENT) (ALT ID DECREMENT) (ALT ID PLUS_ASSIGN) (ALT ID MINUS_ASSIGN) (ALT ID MULT_ASSIGN) (ALT ID DIV_ASSIGN) (ALT ID MOD_ASSIGN)) ASSIGN expression) (ALT ID) (ALT INT_LITERAL) (ALT FLOAT_LITERAL) (ALT CHAR_LITERAL) (ALT LPAREN expression RPAREN)))))
2023-05-13 13:07:51:763 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR cLexer (RULES (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE CHAR (BLOCK (ALT 'char'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE PRINTX (BLOCK (ALT 'printx'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE SEMI (BLOCK (ALT ';'))) (RULE LPAREN (BLOCK (ALT '('))) (RULE RPAREN (BLOCK (ALT ')'))) (RULE LBRACE (BLOCK (ALT '{'))) (RULE RBRACE (BLOCK (ALT '}'))) (RULE COMMA (BLOCK (ALT ','))) (RULE PLUS (BLOCK (ALT '+'))) (RULE MINUS (BLOCK (ALT '-'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE MOD (BLOCK (ALT '%'))) (RULE ASSIGN (BLOCK (ALT '='))) (RULE PLUS_ASSIGN (BLOCK (ALT '+='))) (RULE MINUS_ASSIGN (BLOCK (ALT '-='))) (RULE MULT_ASSIGN (BLOCK (ALT '*='))) (RULE DIV_ASSIGN (BLOCK (ALT '/='))) (RULE MOD_ASSIGN (BLOCK (ALT '%='))) (RULE INCREMENT (BLOCK (ALT '++'))) (RULE DECREMENT (BLOCK (ALT '--'))) (RULE EQ (BLOCK (ALT '=='))) (RULE NEQ (BLOCK (ALT '!='))) (RULE LT (BLOCK (ALT '<'))) (RULE GT (BLOCK (ALT '>'))) (RULE LTEQ (BLOCK (ALT '<='))) (RULE GTEQ (BLOCK (ALT '>='))) (RULE AND (BLOCK (ALT '&&'))) (RULE OR (BLOCK (ALT '||'))) (RULE NOT (BLOCK (ALT '!'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE INT_LITERAL (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT_LITERAL (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9])))))) (RULE CHAR_LITERAL (BLOCK (ALT '\'' . '\'')))))
2023-05-13 13:07:52:373 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, CHAR=3, IF=4, ELSE=5, WHILE=6, FOR=7, PRINTX=8, ID=9, STRING=10, SEMI=11, LPAREN=12, RPAREN=13, LBRACE=14, RBRACE=15, COMMA=16, PLUS=17, MINUS=18, MULT=19, DIV=20, MOD=21, ASSIGN=22, PLUS_ASSIGN=23, MINUS_ASSIGN=24, MULT_ASSIGN=25, DIV_ASSIGN=26, MOD_ASSIGN=27, INCREMENT=28, DECREMENT=29, EQ=30, NEQ=31, LT=32, GT=33, LTEQ=34, GTEQ=35, AND=36, OR=37, NOT=38, WS=39, INT_LITERAL=40, FLOAT_LITERAL=41, CHAR_LITERAL=42}
2023-05-13 13:07:52:373 semantics LogManager.java:25 strings={'int'=1, 'float'=2, 'char'=3, 'if'=4, 'else'=5, 'while'=6, 'for'=7, 'printx'=8, ';'=11, '('=12, ')'=13, '{'=14, '}'=15, ','=16, '+'=17, '-'=18, '*'=19, '/'=20, '%'=21, '='=22, '+='=23, '-='=24, '*='=25, '/='=26, '%='=27, '++'=28, '--'=29, '=='=30, '!='=31, '<'=32, '>'=33, '<='=34, '>='=35, '&&'=36, '||'=37, '!'=38}
2023-05-13 13:07:52:388 LL1 LogManager.java:25 
DECISION 0 in rule program
2023-05-13 13:07:52:388 LL1 LogManager.java:25 look=[{1..4, 6..9}, <EOF>]
2023-05-13 13:07:52:388 LL1 LogManager.java:25 LL(1)? true
2023-05-13 13:07:52:388 LL1 LogManager.java:25 
DECISION 1 in rule statement
2023-05-13 13:07:52:388 LL1 LogManager.java:25 look=[{1..3}, 9, 8, 4, 6, 7]
2023-05-13 13:07:52:404 LL1 LogManager.java:25 LL(1)? true
2023-05-13 13:07:52:404 LL1 LogManager.java:25 
DECISION 2 in rule variable_declaration
2023-05-13 13:07:52:404 LL1 LogManager.java:25 look=[22, 11]
2023-05-13 13:07:52:404 LL1 LogManager.java:25 LL(1)? true
2023-05-13 13:07:52:404 LL1 LogManager.java:25 
DECISION 3 in rule assignment_statement
2023-05-13 13:07:52:404 LL1 LogManager.java:25 look=[9, 9, 9, 9, 9, 9, 9, 9]
2023-05-13 13:07:52:404 LL1 LogManager.java:25 LL(1)? false
2023-05-13 13:07:52:404 LL1 LogManager.java:25 
DECISION 4 in rule if_statement
2023-05-13 13:07:52:404 LL1 LogManager.java:25 look=[{1..4, 6..9}, 15]
2023-05-13 13:07:52:404 LL1 LogManager.java:25 LL(1)? true
2023-05-13 13:07:52:404 LL1 LogManager.java:25 
DECISION 5 in rule if_statement
2023-05-13 13:07:52:404 LL1 LogManager.java:25 look=[{1..4, 6..9}, 15]
2023-05-13 13:07:52:404 LL1 LogManager.java:25 LL(1)? true
2023-05-13 13:07:52:404 LL1 LogManager.java:25 
DECISION 6 in rule if_statement
2023-05-13 13:07:52:404 LL1 LogManager.java:25 look=[5, {<EOF>, 1..4, 6..9, 15}]
2023-05-13 13:07:52:404 LL1 LogManager.java:25 LL(1)? true
2023-05-13 13:07:52:404 LL1 LogManager.java:25 
DECISION 7 in rule while_statement
2023-05-13 13:07:52:404 LL1 LogManager.java:25 look=[{1..4, 6..9}, 15]
2023-05-13 13:07:52:404 LL1 LogManager.java:25 LL(1)? true
2023-05-13 13:07:52:404 LL1 LogManager.java:25 
DECISION 8 in rule for_statement
2023-05-13 13:07:52:404 LL1 LogManager.java:25 look=[{1..4, 6..9}, 15]
2023-05-13 13:07:52:404 LL1 LogManager.java:25 LL(1)? true
2023-05-13 13:07:52:404 LL1 LogManager.java:25 
DECISION 9 in rule expression
2023-05-13 13:07:52:404 LL1 LogManager.java:25 look=[37, {11, 13, 17..21, 30..37}]
2023-05-13 13:07:52:404 LL1 LogManager.java:25 LL(1)? false
2023-05-13 13:07:52:404 LL1 LogManager.java:25 
DECISION 10 in rule logical_term
2023-05-13 13:07:52:404 LL1 LogManager.java:25 look=[36, {11, 13, 17..21, 30..37}]
2023-05-13 13:07:52:404 LL1 LogManager.java:25 LL(1)? false
2023-05-13 13:07:52:404 LL1 LogManager.java:25 
DECISION 11 in rule logical_factor
2023-05-13 13:07:52:404 LL1 LogManager.java:25 look=[38, {9, 12, 40..42}]
2023-05-13 13:07:52:404 LL1 LogManager.java:25 LL(1)? true
2023-05-13 13:07:52:404 LL1 LogManager.java:25 
DECISION 12 in rule logical_factor
2023-05-13 13:07:52:404 LL1 LogManager.java:25 look=[{9, 12, 40..42}, 12]
2023-05-13 13:07:52:404 LL1 LogManager.java:25 LL(1)? false
2023-05-13 13:07:52:404 LL1 LogManager.java:25 
DECISION 13 in rule relation
2023-05-13 13:07:52:404 LL1 LogManager.java:25 look=[{30..35}, {11, 13, 17..21, 30..37}]
2023-05-13 13:07:52:404 LL1 LogManager.java:25 LL(1)? false
2023-05-13 13:07:52:404 LL1 LogManager.java:25 
DECISION 14 in rule additive_expression
2023-05-13 13:07:52:420 LL1 LogManager.java:25 look=[{17..18}, {11, 13, 17..21, 30..37}]
2023-05-13 13:07:52:420 LL1 LogManager.java:25 LL(1)? false
2023-05-13 13:07:52:420 LL1 LogManager.java:25 
DECISION 15 in rule multiplicative_expression
2023-05-13 13:07:52:420 LL1 LogManager.java:25 look=[{19..21}, {11, 13, 17..21, 30..37}]
2023-05-13 13:07:52:420 LL1 LogManager.java:25 LL(1)? false
2023-05-13 13:07:52:420 LL1 LogManager.java:25 
DECISION 16 in rule factor
2023-05-13 13:07:52:420 LL1 LogManager.java:25 look=[9, 9, 9, 9, 9, 9, 9]
2023-05-13 13:07:52:420 LL1 LogManager.java:25 LL(1)? false
2023-05-13 13:07:52:420 LL1 LogManager.java:25 
DECISION 17 in rule factor
2023-05-13 13:07:52:420 LL1 LogManager.java:25 look=[9, 9, 40, 41, 42, 12]
2023-05-13 13:07:52:420 LL1 LogManager.java:25 LL(1)? false
